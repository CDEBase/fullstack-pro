// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Counter renders 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <form>
    <legend>
        a counter!
    </legend>
    <pre>
        {
          "counter": {
            "value": 0
          },
          "isSaving": false,
          "isLoading": false
        }
    </pre>
    <button
        onClick={[Function]}
    >
        click me!
    </button>
    <button
        disabled={false}
        onClick={[Function]}
    >
        save
    </button>
    <button
        disabled={false}
        onClick={[Function]}
    >
        load
    </button>
</form>,
  "nodes": Array [
    <form>
      <legend>
            a counter!
      </legend>
      <pre>
            {
              "counter": {
                "value": 0
              },
              "isSaving": false,
              "isLoading": false
            }
      </pre>
      <button
            onClick={[Function]}
      >
            click me!
      </button>
      <button
            disabled={false}
            onClick={[Function]}
      >
            save
      </button>
      <button
            disabled={false}
            onClick={[Function]}
      >
            load
      </button>
</form>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <CounterComponent
        counter={
                Object {
                        "value": 0,
                      }
        }
        error=""
        increment={[Function]}
        isLoading={false}
        isSaving={false}
        label="a counter!"
        load={[Function]}
        save={[Function]}
        store={
                Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
        }
        storeSubscription={
                Subscription {
                        "listeners": Object {
                          "notify": [Function],
                        },
                        "onStateChange": [Function],
                        "parentSub": undefined,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        },
                        "unsubscribe": null,
                      }
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": CounterComponent {
        "_onClickIncrement": [Function],
        "_onClickLoad": [Function],
        "_onClickSave": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "counter": Object {
            "value": 0,
          },
          "error": "",
          "increment": [Function],
          "isLoading": false,
          "isSaving": false,
          "label": "a counter!",
          "load": [Function],
          "save": [Function],
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "storeSubscription": Subscription {
            "listeners": Object {
              "notify": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": null,
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <form>
          <legend>
                    a counter!
          </legend>
          <pre>
                    {
                      "counter": {
                        "value": 0
                      },
                      "isSaving": false,
                      "isLoading": false
                    }
          </pre>
          <button
                    onClick={[Function]}
          >
                    click me!
          </button>
          <button
                    disabled={false}
                    onClick={[Function]}
          >
                    save
          </button>
          <button
                    disabled={false}
                    onClick={[Function]}
          >
                    load
          </button>
</form>,
        "_debugID": 4,
        "_renderedOutput": <form>
          <legend>
                    a counter!
          </legend>
          <pre>
                    {
                      "counter": {
                        "value": 0
                      },
                      "isSaving": false,
                      "isLoading": false
                    }
          </pre>
          <button
                    onClick={[Function]}
          >
                    click me!
          </button>
          <button
                    disabled={false}
                    onClick={[Function]}
          >
                    save
          </button>
          <button
                    disabled={false}
                    onClick={[Function]}
          >
                    load
          </button>
</form>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <CounterComponent
    counter={
        Object {
            "value": 0,
          }
    }
    error=""
    increment={[Function]}
    isLoading={false}
    isSaving={false}
    label="a counter!"
    load={[Function]}
    save={[Function]}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "notify": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": null,
          }
    }
/>,
}
`;
